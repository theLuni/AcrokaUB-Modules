"""
.Ultimate Biz Finder - –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –∏ –æ—Ñ–∏—Å–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
version = "6.6"  # –£–≤–µ–ª–∏—á–∏–ª –≤–µ—Ä—Å–∏—é

commands = {
    "ubiz": "–ø–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
    "uoffice": "–ø–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞",
    "ucfg": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (delay/log_interval) –∑–Ω–∞—á–µ–Ω–∏–µ",
    "ustop": "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
}

import asyncio
from telethon import events
import datetime
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = "ubiz_log.txt"
CONFIG_DIR = "source/mods"
CONFIG_FILE = os.path.join(CONFIG_DIR, "ubiz_config.json")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º
ACTIVE_SEARCH = {
    "running": False,
    "stop_requested": False
}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(CONFIG_DIR, exist_ok=True)

async def load_config():
    default_config = {
        "delay": 1,
        "log_interval": 2
    }
    
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(default_config, f, indent=4)
        return default_config
    
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        try:
            config = json.load(f)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for key in default_config:
                if key not in config:
                    config[key] = default_config[key]
            return config
        except json.JSONDecodeError:
            return default_config

async def save_config(config):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4)

async def log_to_file(message):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}\n"
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_entry)

async def on_load(client, prefix):
    handlers = []
    config = await load_config()
    
    @client.on(events.NewMessage(pattern=f'^{prefix}ucfg (delay|log_interval) (\\d+)$', outgoing=True))
    async def config_handler(event):
        param = event.pattern_match.group(1)
        value = int(event.pattern_match.group(2))
        
        if value <= 0:
            await event.edit(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
            
        config[param] = value
        await save_config(config)
        
        await event.edit(
            f"‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"‚öôÔ∏è <b>{param}:</b> <code>{value}</code>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚è≥ <b>delay:</b> <code>{config['delay']}</code>\n"
            f"üìù <b>log_interval:</b> <code>{config['log_interval']}</code>",
            parse_mode='html'
        )
        await log_to_file(f"–ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param} –Ω–∞ {value}")

    @client.on(events.NewMessage(pattern=f'^{prefix}ustop$', outgoing=True))
    async def stop_handler(event):
        if not ACTIVE_SEARCH["running"]:
            await event.edit("‚ÑπÔ∏è <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</b>", parse_mode='html')
            return
            
        ACTIVE_SEARCH["stop_requested"] = True
        await event.edit("üõë <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...</b>", parse_mode='html')
        await log_to_file("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–∏—Å–∫–∞")

    @client.on(events.NewMessage(pattern=f'^{prefix}ubiz$', outgoing=True))
    async def ubiz_handler(event):
        if ACTIVE_SEARCH["running"]:
            await event.edit("‚ö†Ô∏è <b>–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>ustop</code> –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", parse_mode='html')
            return
            
        CONFIG = {
            'target_class': '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π',
            'bot_username': '@Miner_sBot',
            'command': '/gbiz',
            'delay': config['delay'],
            'log_interval': config['log_interval'],
            'type': '–±–∏–∑–Ω–µ—Å'
        }
        await run_search(event, CONFIG)
    
    @client.on(events.NewMessage(pattern=f'^{prefix}uoffice$', outgoing=True))
    async def gofice_handler(event):
        if ACTIVE_SEARCH["running"]:
            await event.edit("‚ö†Ô∏è <b>–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>ustop</code> –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", parse_mode='html')
            return
            
        CONFIG = {
            'target_class': '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π',
            'bot_username': '@Miner_sBot',
            'command': '/goffice',
            'delay': config['delay'],
            'log_interval': config['log_interval'],
            'type': '–æ—Ñ–∏—Å'
        }
        await run_search(event, CONFIG)
    
    async def run_search(event, CONFIG):
        global ACTIVE_SEARCH
        
        ACTIVE_SEARCH = {
            "running": True,
            "stop_requested": False
        }
        
        init_msg = (
            f"üîÑ <b>–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–ò–°–ö–ê {CONFIG['type'].upper()}–ê...</b>\n"
            f"üîé –¶–µ–ª–µ–≤–æ–π –∫–ª–∞—Å—Å: <code>{CONFIG['target_class']}</code>\n"
            f"ü§ñ –†–∞–±–æ—Ç–∞—é —Å –±–æ—Ç–æ–º: <code>{CONFIG['bot_username']}</code>\n"
            f"‚è± –ó–∞–¥–µ—Ä–∂–∫–∞: <code>{CONFIG['delay']} —Å–µ–∫</code>\n"
            f"üìù –ò–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–æ–≤: <code>{CONFIG['log_interval']} —Å–µ–∫</code>\n"
            "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è"
        )
        log_msg = await event.edit(init_msg, parse_mode='html')
        await log_to_file(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_msg.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', '')}")
        
        class State:
            attempts = 0
            last_log = 0
            found = False
            money_error = False

            async def detailed_log(self, text, force=False):
                current_time = asyncio.get_event_loop().time()
                if force or (current_time - self.last_log >= CONFIG['log_interval']):
                    await log_msg.edit(text, parse_mode='html')
                    self.last_log = current_time
                    clean_text = text.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', '').replace('<i>', '').replace('</i>', '')
                    await log_to_file(clean_text)
                    return True
                return False

        state = State()

        async def analyze_response():
            try:
                messages = await client.get_messages(CONFIG['bot_username'], limit=3)
                
                for msg in messages:
                    if msg.out:
                        continue
                        
                    raw_text = msg.text
                    
                    if "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ" in raw_text.lower():
                        await state.detailed_log(
                            f"‚ö†Ô∏è <b>–û–ë–ù–ê–†–£–ñ–ï–ù–û:</b> –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ {CONFIG['type']}–æ–≤\n"
                            "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é <code>/bsell_all</code>",
                            force=True
                        )
                        await client.send_message(CONFIG['bot_username'], '/bsell_all')
                        await asyncio.sleep(CONFIG['delay'])
                        return False
                    
                    if "–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $" in raw_text.lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤" in raw_text.lower():
                        state.money_error = True
                        try:
                            messages_to_delete = await client.get_messages(CONFIG['bot_username'], limit=3)
                            for msg_to_delete in messages_to_delete:
                                if not msg_to_delete.out:
                                    await msg_to_delete.delete()
                        except Exception as delete_error:
                            await log_to_file(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(delete_error)}")
                        
                        await state.detailed_log(
                            f"üí∏ <b>–û–®–ò–ë–ö–ê:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n"
                            f"üö´ <b>–ü–û–ò–°–ö –ü–†–ï–ö–†–ê–©–ï–ù</b>",
                            force=True
                        )
                        await event.respond(
                            f"üí∏ <b>–ü–û–ò–°–ö –û–°–¢–ê–ù–û–í–õ–ï–ù!</b>\n\n"
                            f"‚ùå –î–µ–Ω—å–≥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {CONFIG['type']}–∞\n"
                            f"üî¢ <b>–ü–æ–ø—ã—Ç–æ–∫:</b> {state.attempts}",
                            parse_mode='html'
                        )
                        return True
                        
                    win_phrases = ["‚≠êÔ∏è **–¢—ã –≤—ã–∏–≥—Ä–∞–ª", "‚≠êÔ∏è –¢—ã –≤—ã–∏–≥—Ä–∞–ª"]
                    if not any(phrase in raw_text for phrase in win_phrases):
                        continue
                        
                    lines = [line.strip() for line in raw_text.split('\n') if line.strip()]
                    if len(lines) < 3:
                        continue
                        
                    item_info = {}
                    for line in lines:
                        if CONFIG['type'] == '–±–∏–∑–Ω–µ—Å':
                            if "–ë–∏–∑–Ω–µ—Å:" in line:
                                item_info['name'] = line.split("–ë–∏–∑–Ω–µ—Å:")[1].replace("**", "").strip()
                            elif "–ö–ª–∞—Å—Å –±–∏–∑–Ω–µ—Å–∞:" in line:
                                item_info['class'] = line.split("–ö–ª–∞—Å—Å –±–∏–∑–Ω–µ—Å–∞:")[1].replace("**", "").strip()
                        else:
                            if "–û—Ñ–∏—Å:" in line:
                                item_info['name'] = line.split("–û—Ñ–∏—Å:")[1].replace("**", "").strip()
                            elif "–ö–ª–∞—Å—Å –æ—Ñ–∏—Å–∞:" in line:
                                item_info['class'] = line.split("–ö–ª–∞—Å—Å –æ—Ñ–∏—Å–∞:")[1].replace("**", "").strip()
                    
                    if not item_info.get('name') or not item_info.get('class'):
                        continue
                        
                    state.attempts += 1
                    await state.detailed_log(
                        f"üîé <b>–ü–û–ü–´–¢–ö–ê #{state.attempts}</b>\n"
                        f"üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{item_info['name']}</code>\n"
                        f"üèÜ <b>–ö–ª–∞—Å—Å:</b> <code>{item_info['class']}</code>\n"
                        f"üéØ <b>–¶–µ–ª—å:</b> <code>{CONFIG['target_class']}</code>\n"
                        "‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è"
                    )
                    
                    if item_info['class'].lower() == CONFIG['target_class'].lower():
                        state.found = True
                        await state.detailed_log(
                            f"üéâ <b>–£–°–ü–ï–•!</b>\n"
                            f"‚úÖ –ù–∞–π–¥–µ–Ω {CONFIG['type']} –∫–ª–∞—Å—Å–∞ <code>{CONFIG['target_class']}</code>\n"
                            f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{item_info['name']}</code>\n"
                            f"üîÑ <i>–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...</i>",
                            force=True
                        )
                        await event.respond(
                            f"‚úÖ <b>–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!</b>\n\n"
                            f"üèÜ <b>–ö–ª–∞—Å—Å:</b> {item_info['class']}\n"
                            f"üè¢ <b>{CONFIG['type'].capitalize()}:</b> {item_info['name']}\n"
                            f"üî¢ <b>–ü–æ–ø—ã—Ç–æ–∫:</b> {state.attempts}",
                            parse_mode='html'
                        )
                        return True
                        
            except Exception as e:
                error_msg = f"‚ùå <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:</b>\n<code>{str(e)}</code>"
                await state.detailed_log(error_msg, force=True)
                await log_to_file(f"–û—à–∏–±–∫–∞: {str(e)}")
                raise
                
            return False

        try:
            while not state.found and not state.money_error and not ACTIVE_SEARCH["stop_requested"]:
                send_msg = f"üîÑ <b>–ü–û–ü–´–¢–û–ö:</b> <code>{state.attempts}</code>"
                await state.detailed_log(send_msg, force=True)

                await client.send_message(CONFIG['bot_username'], CONFIG['command'])
                await asyncio.sleep(CONFIG['log_interval'])

                if await analyze_response():
                    break
                    
                state.attempts += 1
                await asyncio.sleep(CONFIG['delay'])
                
            if ACTIVE_SEARCH["stop_requested"]:
                await state.detailed_log(
                    "üõë <b>–ü–û–ò–°–ö –û–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú</b>\n\n"
                    f"üî¢ <b>–ü–æ–ø—ã—Ç–æ–∫:</b> {state.attempts}",
                    force=True
                )
                await event.respond(
                    f"üõë <b>–ü–û–ò–°–ö –û–°–¢–ê–ù–û–í–õ–ï–ù!</b>\n\n"
                    f"üî¢ <b>–ü–æ–ø—ã—Ç–æ–∫:</b> {state.attempts}",
                    parse_mode='html'
                )
                
        except Exception as e:
            error_msg = f"üö® <b>–†–ê–ë–û–¢–ê –ü–†–ï–†–í–ê–ù–ê:</b>\n<code>{str(e)}</code>"
            await state.detailed_log(error_msg, force=True)
            await log_to_file(f"–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {str(e)}")
            raise
            
        finally:
            ACTIVE_SEARCH["running"] = False
            ACTIVE_SEARCH["stop_requested"] = False
    
    handlers.extend([ubiz_handler, gofice_handler, config_handler, stop_handler])
    return handlers
