"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ API
"""

version = "2.3"

commands = {
    "ai": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
    "aimodel": "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å"
}
import json
import aiohttp
import base64
import re
from telethon import events

async def on_load(client, prefix):
    handlers = []
    
    class ModuleState:
        def __init__(self):
            self.default_model = "gpt-4o-mini"
            self.api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models"
    
    state = ModuleState()

    def clean_response(text):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
        if isinstance(text, str):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ base64 (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
            base64_pattern = r"^[A-Za-z0-9+/]+={0,2}$"
            if re.fullmatch(base64_pattern, text):
                try:
                    decoded = base64.b64decode(text).decode('utf-8')
                    return decoded
                except:
                    pass
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö Unicode-—Å–∏–º–≤–æ–ª–æ–≤
            text = re.sub(r'[\u200b-\u200f\u202a-\u202e]', '', text)
            
        return text.strip()

    @client.on(events.NewMessage(pattern=f'^{prefix}ai(?: |$)(.*)', outgoing=True))
    async def ai_handler(event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `.ai –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?`")
            return

        await event.edit("ü§î –î—É–º–∞—é...")
        
        payload = {
            "model": state.default_model,
            "request": {
                "messages": [
                    {"role": "user", "content": args}
                ]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                    answer = data.get("answer") or data.get("response") or data.get("message") or ""
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
                    answer = clean_response(answer)
                    
                    if not answer:
                        answer = "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                    
                    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if len(answer) > 4000:
                        answer = answer[:3900] + "\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
                    
                    await event.edit(f"üí° –û—Ç–≤–µ—Ç:\n\n{answer}")
                    
        except aiohttp.ClientError as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        except json.JSONDecodeError:
            await event.edit("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    handlers.append(ai_handler)

    @client.on(events.NewMessage(pattern=f'^{prefix}aimodel(?: |$)(.*)', outgoing=True))
    async def aimodel_handler(event):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ò–ò"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å. –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {state.default_model}")
            return
        
        state.default_model = args
        await event.edit(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {state.default_model}")

    handlers.append(aimodel_handler)
    
    return handlers
