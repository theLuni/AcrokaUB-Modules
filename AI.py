"""
–ù–∞–∑–≤–∞–Ω–∏–µ: AI Module
–û–ø–∏—Å–∞–Ω–∏–µ: –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
–ö–æ–º–∞–Ω–¥—ã: ai, aimodel, aichat, aicreate, aisup, airw, aipic, aivoice
–í–µ—Ä—Å–∏—è: 2.5
"""

import json
import aiohttp
import base64
import re
import os
import io
from telethon import events
from PIL import Image
import asyncio

async def on_load(client, prefix):
    handlers = []
    
    class ModuleState:
        def __init__(self):
            self.default_model = "gpt-4"
            self.api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models"
            self.image_api_url = "http://109.172.94.236:5002/OnlySq-Zetta/v1/images"
            self.available_models = {
                "1": "o3-PRO",
                "2": "o1-PRO",
                "3": "o3-Mini-High",
                "4": "Grok 3",
                "5": "GPT 4.1",
                "6": "qwen3-235b-a22b",
                "7": "qwen-max-latest",
                "8": "qwen-plus-2025-01-25",
                "9": "qwen-turbo-2025-02-11",
                "10": "qwen2.5-coder-32b-instruct",
                "11": "qwen2.5-72b-instruct",
                "12": "gpt-4.5",
                "13": "gpt-4o",
                "14": "gpt-4o-mini",
                "15": "gpt4-turbo",
                "16": "gpt-3.5-turbo",
                "17": "gpt-4",
                "18": "deepseek-v3",
                "19": "deepseek-r1",
                "20": "gemini-1.5 Pro",
                "21": "gemini-2.5-pro-exp-03-25",
                "22": "gemini-2.5-flash",
                "23": "gemini-2.0-flash",
                "24": "llama-4-maverick",
                "25": "llama-4-scout",
                "26": "llama-3.3-70b",
                "27": "llama-3.3-8b",
                "28": "llama-3.1",
                "29": "llama-2",
                "30": "claude-3.5-sonnet",
                "31": "claude-3-haiku",
                "32": "bard",
                "33": "qwen",
                "34": "t-pro",
                "35": "t-lite"
            }
    
    state = ModuleState()

    def clean_response(text):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        if not isinstance(text, str):
            return str(text)
            
        text = re.sub(r'[\u200b-\u200f\u202a-\u202e\ufeff]', '', text)
        text = re.sub(r'\n{3,}', '\n\n', text)
        return text.strip()

    @client.on(events.NewMessage(pattern=f'^{prefix}ai(?: |$)(.*)', outgoing=True))
    async def ai_handler(event):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n–ü—Ä–∏–º–µ—Ä: `{prefix}ai –ü—Ä–∏–≤–µ—Ç!`")
            return

        await event.edit("ü§î –î—É–º–∞—é...")
        
        payload = {
            "model": state.default_model,
            "request": {
                "messages": [
                    {"role": "user", "content": args}
                ]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "")
                    
                    if not answer:
                        answer = "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
                    
                    answer = clean_response(answer)
                    
                    if len(answer) > 4000:
                        answer = answer[:3900] + "\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
                    
                    await event.edit(f"üí° –û—Ç–≤–µ—Ç ({state.default_model}):\n\n{answer}")
                    
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    @client.on(events.NewMessage(pattern=f'^{prefix}aimodel(?: |$)(.*)', outgoing=True))
    async def aimodel_handler(event):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò"""
        args = event.pattern_match.group(1).strip()
        
        if not args:
            model_list = "\n".join([f"{k}. {v}" for k, v in state.available_models.items()])
            await event.edit(f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{model_list}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `{prefix}aimodel <–Ω–æ–º–µ—Ä>`")
            return
        
        if args in state.available_models:
            state.default_model = state.available_models[args]
            await event.edit(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {state.default_model}")
        else:
            await event.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `.aimodel` –¥–ª—è —Å–ø–∏—Å–∫–∞.")

    @client.on(events.NewMessage(pattern=f'^{prefix}aipic(?: |$)(.*)', outgoing=True))
    async def aipic_handler(event):
        """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ü—Ä–∏–º–µ—Ä: `{prefix}aipic –ö–æ—Ç –≤ —à–ª—è–ø–µ`")
            return

        await event.edit("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        payload = {
            "prompt": args,
            "model": "stable-diffusion-xl"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.image_api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.read()
                    
                    with io.BytesIO(data) as photo:
                        await event.client.send_file(
                            event.chat_id,
                            photo,
                            caption=f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {args}",
                            reply_to=event.id
                        )
                    await event.delete()
                    
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

    @client.on(events.NewMessage(pattern=f'^{prefix}aivoice(?: |$)(.*)', outgoing=True))
    async def aivoice_handler(event):
        """–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n–ü—Ä–∏–º–µ—Ä: `{prefix}aivoice –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?`")
            return

        await event.edit("üîä –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç...")
        
        payload = {
            "text": args,
            "model": "tts-1"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.api_url.replace("models", "tts"), json=payload) as response:
                    response.raise_for_status()
                    data = await response.read()
                    
                    with io.BytesIO(data) as voice:
                        await event.client.send_file(
                            event.chat_id,
                            voice,
                            voice_note=True,
                            caption=f"üîä –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: {args[:50]}...",
                            reply_to=event.id
                        )
                    await event.delete()
                    
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {str(e)}")

    @client.on(events.NewMessage(pattern=f'^{prefix}aichat(?: |$)', outgoing=True))
    async def aichat_handler(event):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò"""
        chat = await event.get_chat()
        await event.edit(f"üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ —Å –ò–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å `{prefix}ai`")

    @client.on(events.NewMessage(pattern=f'^{prefix}airw(?: |$)(.*)', outgoing=True))
    async def airw_handler(event):
        """–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        args = event.pattern_match.group(1).strip()
        reply = await event.get_reply_message()
        
        if not args or not reply:
            await event.edit(f"‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n–ü—Ä–∏–º–µ—Ä: `{prefix}airw –°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ`")
            return

        await event.edit("‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
        
        payload = {
            "model": state.default_model,
            "request": {
                "messages": [
                    {"role": "system", "content": "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"},
                    {"role": "user", "content": f"{args}: {reply.text}"}
                ]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    answer = data.get("answer", "")
                    
                    if not answer:
                        answer = "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç"
                    
                    await event.edit(f"‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{answer}")
                    
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    handlers.extend([ai_handler, aimodel_handler, aipic_handler, 
                    aivoice_handler, aichat_handler, airw_handler])
    
    return handlers
