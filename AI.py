"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —á–µ—Ä–µ–∑ API
"""

version = "2.3"

commands = {
    "ai": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏",
    "aimodel": "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å"
}

import json
import aiohttp
import base64
import re
from telethon import events

async def on_load(client, prefix):
    handlers = []
    
    class ModuleState:
        def __init__(self):
            self.default_model = "gpt-4o-mini"
            self.api_url = "http://109.172.94.236:5001/OnlySq-Zetta/v1/models"
    
    state = ModuleState()

    def decode_possible_base64(text):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ base64 —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        if not isinstance(text, str):
            return text
            
        # –í–∞—Ä–∏–∞–Ω—Ç—ã base64 —Å—Ç—Ä–æ–∫ (–º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)
        for _ in range(3):
            try:
                # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
                clean_text = text.strip()
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                decoded = base64.b64decode(clean_text).decode('utf-8')
                if decoded:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    return decoded
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å padding
                if len(text) % 4 != 0:
                    text += "=" * (4 - len(text) % 4)
                else:
                    break
        return text

    def clean_response(text):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not isinstance(text, str):
            return str(text)
            
        # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[\u200b-\u200f\u202a-\u202e\ufeff]', '', text)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n{3,}', '\n\n', text)
        return text.strip()

    @client.on(events.NewMessage(pattern=f'^{prefix}ai(?: |$)(.*)', outgoing=True))
    async def ai_handler(event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `.ai –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?`")
            return

        await event.edit("ü§î –î—É–º–∞—é...")
        
        payload = {
            "model": state.default_model,
            "request": {
                "messages": [
                    {"role": "user", "content": args}
                ]
            }
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(state.api_url, json=payload) as response:
                    response.raise_for_status()
                    data = await response.json()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                    answer = ""
                    for field in ["answer", "response", "message", "text"]:
                        if field in data and data[field]:
                            answer = str(data[field])
                            break
                    
                    if not answer:
                        answer = "üö´ –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    decoded_answer = decode_possible_base64(answer)
                    if decoded_answer != answer:
                        answer = decoded_answer
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
                    answer = clean_response(answer)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                    if len(answer) > 4000:
                        answer = answer[:3900] + "\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
                    
                    await event.edit(f"üí° –û—Ç–≤–µ—Ç:\n\n{answer}")
                    
        except aiohttp.ClientError as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        except json.JSONDecodeError:
            await event.edit("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
        except Exception as e:
            await event.edit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    handlers.append(ai_handler)

    @client.on(events.NewMessage(pattern=f'^{prefix}aimodel(?: |$)(.*)', outgoing=True))
    async def aimodel_handler(event):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –ò–ò"""
        args = event.pattern_match.group(1).strip()
        if not args:
            await event.edit(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å. –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {state.default_model}")
            return
        
        state.default_model = args
        await event.edit(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {state.default_model}")

    handlers.append(aimodel_handler)
    
    return handlers
