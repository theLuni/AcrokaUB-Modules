"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å –ø–æ–≥–æ–¥—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API OpenWeatherMap.
"""

version = "2.0"  # –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è
commands = {      # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    "weather": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞",
    "wset": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
    "forecast": "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π"
}

import logging
import requests
import pytz
from datetime import datetime
from telethon import events

logger = logging.getLogger(__name__)

class WeatherDB:
    def __init__(self):
        self.default_city = None
        self.units = 'metric'
        self.lang = 'ru'

weather_db = WeatherDB()

async def on_load(client, prefix):
    handlers = []
    
    @client.on(events.NewMessage(pattern=f'^{prefix}wset(?:\s+(.+))?$'))
    async def set_city_handler(event):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        args = event.pattern_match.group(1)
        if not args:
            current = weather_db.default_city or "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            await event.edit(
                f"üåç –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"–ì–æ—Ä–æ–¥: {current}\n"
                f"–ï–¥–∏–Ω–∏—Ü—ã: {weather_db.units}\n"
                f"–Ø–∑—ã–∫: {weather_db.lang}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {prefix}wset <–≥–æ—Ä–æ–¥> [metric|imperial] [ru|en]"
            )
            return
            
        parts = args.split()
        weather_db.default_city = parts[0]
        
        if len(parts) > 1:
            weather_db.units = parts[1] if parts[1] in ['metric', 'imperial'] else 'metric'
        if len(parts) > 2:
            weather_db.lang = parts[2] if parts[2] in ['ru', 'en'] else 'ru'
            
        await event.edit(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            f"–ì–æ—Ä–æ–¥: {weather_db.default_city}\n"
            f"–ï–¥–∏–Ω–∏—Ü—ã: {weather_db.units}\n"
            f"–Ø–∑—ã–∫: {weather_db.lang}"
        )
    handlers.append(set_city_handler)
    
    @client.on(events.NewMessage(pattern=f'^{prefix}weather(?:\s+(.+))?$'))
    async def weather_handler(event):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"""
        city = event.pattern_match.group(1) or weather_db.default_city
        if not city:
            await event.edit(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {prefix}wset <–≥–æ—Ä–æ–¥>")
            return
            
        try:
            url = "https://api.openweathermap.org/data/2.5/weather"
            params = {
                'q': city,
                'appid': '27f55366fdc2d2df4bdcdb6a2295251c',
                'units': weather_db.units,
                'lang': weather_db.lang
            }
            
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if data.get('cod') != 200:
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return
                
            timezone = pytz.timezone(pytz.country_timezones[data['sys']['country']][0])
            local_time = datetime.now(timezone).strftime("%H:%M")
            
            weather_text = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['name']} ({local_time}):\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(data['main']['temp'])}¬∞C\n"
                f"üé≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(data['main']['feels_like'])}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} m/s\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
                f"‚òÅÔ∏è {data['weather'][0]['description'].capitalize()}"
            )
            
            await event.edit(weather_text)
            
        except Exception as e:
            logger.error(f"Weather error: {e}")
            await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")
    handlers.append(weather_handler)
    
    @client.on(events.NewMessage(pattern=f'^{prefix}forecast(?:\s+(.+))?$'))
    async def forecast_handler(event):
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π"""
        city = event.pattern_match.group(1) or weather_db.default_city
        if not city:
            await event.edit(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {prefix}wset <–≥–æ—Ä–æ–¥>")
            return
            
        try:
            url = "https://api.openweathermap.org/data/2.5/forecast"
            params = {
                'q': city,
                'appid': '27f55366fdc2d2df4bdcdb6a2295251c',
                'units': weather_db.units,
                'lang': weather_db.lang,
                'cnt': 40
            }
            
            response = requests.get(url, params=params, timeout=10)
            data = response.json()
            
            if data.get('cod') != '200':
                await event.edit(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return
                
            forecast_text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ 5 –¥–Ω–µ–π:\n\n"
            current_date = None
            
            for item in data['list']:
                date = datetime.fromtimestamp(item['dt']).strftime('%d.%m')
                if date != current_date:
                    current_date = date
                    forecast_text += (
                        f"üìå {date}:\n"
                        f"üå° {round(item['main']['temp'])}¬∞C | "
                        f"üí® {item['wind']['speed']} m/s | "
                        f"üíß {item['main']['humidity']}% | "
                        f"{item['weather'][0]['description']}\n\n"
                    )
                    
            await event.edit(forecast_text)
            
        except Exception as e:
            logger.error(f"Forecast error: {e}")
            await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")
    handlers.append(forecast_handler)
    
    return handlers